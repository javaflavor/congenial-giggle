---
# DevOps Tools playbook.
#
# The following variables come from the ansible-operator
# - meta.namespace
# - meta.name (from the name of the CR)

- hosts: localhost
  gather_facts: no
  tasks:
  - name: Set up PostgreSQL for Gogs
    include_role:
      name: ./roles/postgresql-ocp
    vars:
      _postgresql_state: "{{ gogs.enabled | ternary('present', 'absent') }}"
      _postgresql_namespace: "{{ meta.namespace }}"
      _postgresql_name: "postgresql-gogs"
      _postgresql_database_name: "gogsdb"
      _postgresql_user: "{{ gogs.postgresql.username | d('gogs') }}"
      _postgresql_password: "{{ gogs.postgresql.password | d('gogs') }}"
      _postgresql_volume_size: "{{ gogs.postgresql.volume_size|d('4Gi') }}"
      _postgresql_image: "{{ gogs.postgresql.image | d('registry.redhat.io/rhscl/postgresql-96-rhel7') }}"
      _postgresql_image_tag: "{{ gogs.postgresql.image_tag | d('latest') }}"

  - name: Set Gogs Service name to default value
    set_fact:
      gogs_service_name: "gogs"
    when:
      gogs_service_name is not defined
  - name: Set up Gogs
    include_role:
      name: ./roles/gogs-ocp
    vars:
      _gogs_state: "{{ gogs.enabled | ternary('present', 'absent') }}"
      _gogs_namespace: "{{ meta.namespace }}"
      _gogs_name: "{{ gogs_service_name }}"
      _gogs_ssl: "{{ gogs.ssl | d(False) | bool }}"
      _gogs_volume_size: "{{ gogs.volume_size | d('4Gi') }}"
      _gogs_image: "{{ gogs.image | d('docker.io/wkulhanek/gogs') }}"
      _gogs_image_tag: "{{ gogs.image_tag|d('latest') }}"
      _gogs_postgresql_service_name: "postgresql-gogs"
      _gogs_postgresql_database_name: gogsdb
      _gogs_postgresql_user: "{{ gogs.postgresql.username | d('gogs') }}"
      _gogs_postgresql_password: "{{ gogs.postgresql.password | d('gogs') }}"

  - name: Set up Jenkins
    include_role:
      name: ./roles/jenkins-ocp
    vars:
      _jenkins_state: "{{ jenkins.enabled | ternary('present', 'absent') }}"
      _jenkins_namespace: "{{ meta.namespace }}"
#      _jenkins_name: "{{ meta.name }}"
      _jenkins_volume_size: "{{ jenkins.volume_size | d('1Gi') }}"
      _jenkins_disable_administrative_monitors: "{{ jenkins_disable_administrative_monitors | d('false)') }}"

  - name: Set SonarQube Service name to default value
    set_fact:
      sonarqube_service_name: "sonarqube"
    when:
      sonarqube_service_name is not defined

  - name: Set up PostgreSQL for SonarQube
    include_role:
      name: ./roles/postgresql-ocp
    vars:
      _postgresql_state: "{{ sonarqube.enabled | ternary('present', 'absent') }}"
      _postgresql_namespace: "{{ meta.namespace }}"
      _postgresql_name: "postgresql-sonarqube"
      _postgresql_database_name: "sonardb"
      _postgresql_user: "{{ sonarqube.postgresql.username | d('sonar') }}"
      _postgresql_password: "{{ sonarqube.postgresql.password | d('sonar') }}"
      _postgresql_volume_size: "{{ sonarqube.postgresql.volume_size | d('2Gi') }}"
      _postgresql_image: "{{ sonarqube.postgresql.image | d('registry.redhat.io/rhscl/postgresql-96-rhel7') }}"
      _postgresql_image_tag: "{{ sonarqube.postgresql.image_tag | d('latest') }}"

  - name: Set up Sonarqube
    include_role:
      name: ./roles/sonarqube-ocp
    vars:
      _sonarqube_state: "{{ sonarqube.enabled | ternary('present', 'absent') }}"
      _sonarqube_namespace: "{{ meta.namespace }}"
      _sonarqube_name: "{{ sonarqube_service_name }}"
      _sonarqube_ssl: "{{ sonarqube.ssl | d(False) | bool }}"
      _sonarqube_volume_size: "{{ sonarqube.volume_size | d('1Gi')}}"
      _sonarqube_postgresql_service_name: "postgresql-sonarqube"
      _sonarqube_postgresql_database_name: sonardb
      _sonarqube_postgresql_user: "{{ sonarqube.postgresql.username | d('sonar') }}"
      _sonarqube_postgresql_password: "{{ sonarqube.postgresql.password | d('sonar') }}"
      _sonarqube_image_tag: "{{ sonarqube.image_tag | d('latest') }}"
